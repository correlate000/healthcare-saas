'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Star, Heart, Zap, Crown, MapPin, Calendar, Clock } from 'lucide-react'

export interface StoryArc {
  id: string
  title: string
  description: string
  chapters: StoryChapter[]
  character: 'luna' | 'aria' | 'zen'
  theme: 'growth' | 'resilience' | 'connection' | 'discovery'
  estimatedDuration: string
}

export interface StoryChapter {
  id: string
  title: string
  content: string
  choices?: StoryChoice[]
  reward?: {
    xp: number
    item?: string
    insight?: string
  }
  mood?: 'uplifting' | 'reflective' | 'energizing' | 'calming'
  unlockCondition?: {
    type: 'streak' | 'mood_improvement' | 'social_interaction'
    value: number
  }
}

export interface StoryChoice {
  id: string
  text: string
  consequence: string
  mood_impact: number
  next_chapter?: string
}

// Sample story arcs with personalized narratives
const storyArcs: StoryArc[] = [
  {
    id: 'luna-growth',
    title: 'Luna\'s Journey of Self-Discovery',
    description: 'Join Luna as she guides you through understanding your emotional patterns',
    character: 'luna',
    theme: 'discovery',
    estimatedDuration: '2ÈÄ±Èñì',
    chapters: [
      {
        id: 'chapter-1',
        title: 'The Mirror of Emotions',
        content: '‰ªäÊó•„ÄÅÁßÅ„ÅØÊñ∞„Åó„ÅÑÂèãÈÅîÔºà„ÅÇ„Å™„ÅüÔºâ„Å´Âá∫‰ºö„ÅÑ„Åæ„Åó„Åü„ÄÇüåô‚ú® „ÅÇ„Å™„Åü„ÅÆÂøÉ„ÅÆ‰∏≠„Å´„ÅØ„ÄÅ„Åæ„Çã„ÅßÊúà„ÅÆÊ∫Ä„Å°Ê¨†„Åë„ÅÆ„Çà„ÅÜ„Å´„ÄÅ„Åï„Åæ„Åñ„Åæ„Å™ÊÑüÊÉÖ„ÅåÂÆø„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰∏ÄÁ∑í„Å´„ÄÅ„Åù„ÅÆÁæé„Åó„ÅÑÂ§âÂåñ„ÇíË¶≥ÂØü„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü',
        choices: [
          {
            id: 'curious',
            text: 'ËààÂë≥Ê∑±„ÅÑ„Åß„Åô„ÄÅ„ÇÇ„Å£„Å®Êïô„Åà„Å¶',
            consequence: 'Luna„Åå„ÅÇ„Å™„Åü„ÅÆÂ•ΩÂ•áÂøÉ„ÇíÊÑü„ÅòÂèñ„Çä„ÄÅ„Çà„ÇäÊ∑±„ÅÑÊ¥ûÂØü„ÇíÂàÜ„Åã„Å°Âêà„ÅÑ„Åæ„Åô',
            mood_impact: 2
          },
          {
            id: 'hesitant',
            text: 'Â∞ë„Åó‰∏çÂÆâ„Åß„Åô„Åå„ÄÅË©¶„Åó„Å¶„Åø„Åæ„Åô',
            consequence: 'Luna„Åå„ÅÇ„Å™„Åü„ÅÆ„Éö„Éº„Çπ„Å´Âêà„Çè„Åõ„Å¶„ÄÅÂÑ™„Åó„Åè„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô',
            mood_impact: 1
          }
        ],
        reward: { xp: 25, insight: 'ÊÑüÊÉÖ„ÅØÂ§©Ê∞ó„ÅÆ„Çà„ÅÜ„Å™„ÇÇ„ÅÆ„ÄÇ‰∏ÄÊôÇÁöÑ„Åß„ÄÅÂøÖ„ÅöÂ§âÂåñ„Åó„Åæ„Åô„ÄÇ' },
        mood: 'reflective'
      },
      {
        id: 'chapter-2',
        title: 'The Garden of Thoughts',
        content: '„ÅÇ„Å™„Åü„ÅÆÂøÉ„ÅØÁæé„Åó„ÅÑÂ∫≠„ÅÆ„Çà„ÅÜ„Åß„Åô„ÄÇüå∏ ÊôÇ„Å´„ÅØÈõëËçâÔºà„Éç„Ç¨„ÉÜ„Ç£„Éñ„Å™ÊÄùËÄÉÔºâ„ÅåÁîü„Åà„Çã„Åì„Å®„ÇÇ„ÅÇ„Çä„Åæ„Åô„Åå„ÄÅ„Åù„Çå„ÇÇÊàêÈï∑„ÅÆ‰∏ÄÈÉ®„ÄÇ‰∏ÄÁ∑í„Å´„ÄÅÂøÉ„ÅÆÂ∫≠„ÇíËÇ≤„Å¶„ÇãÊñπÊ≥ï„ÇíÂ≠¶„Å≥„Åæ„Åó„Çá„ÅÜ„ÄÇ',
        reward: { xp: 30, item: 'Mental Garden Badge' },
        mood: 'uplifting'
      }
    ]
  },
  {
    id: 'aria-energy',
    title: 'Aria\'s Adventure of Vitality',
    description: 'Aria „Å®‰∏ÄÁ∑í„Å´„Ç®„Éç„É´„ÇÆ„Éº„ÇíÈ´ò„ÇÅ„ÄÅÊ¥ªÂäõ„Å´Ê∫Ä„Å°„ÅüÊØéÊó•„ÇíÊâã„Å´ÂÖ•„Çå„Çã',
    character: 'aria',
    theme: 'growth',
    estimatedDuration: '10Êó•Èñì',
    chapters: [
      {
        id: 'energy-1',
        title: 'The Spark Within',
        content: '„Åì„Çì„Å´„Å°„ÅØÔºÅÁßÅ„ÅØAria„ÄÅ„ÅÇ„Å™„Åü„ÅÆÂÖÉÊ∞ó„ÅÆÊ∫ê„ÇíË¶ã„Å§„Åë„Çã„ÅäÊâã‰ºù„ÅÑ„Çí„Åó„Åæ„ÅôÔºÅüåü „Åø„Çì„Å™„Å´„ÅØÂÜÖÂÅ¥„Å´Ëºù„ÅèÊòü„Åå„ÅÇ„Çã„Çì„Åß„Åô„ÄÇ‰∏ÄÁ∑í„Å´„ÄÅ„Åù„ÅÆÊòü„ÇíË¶ã„Å§„Åë„Å¶„ÄÅ„ÇÇ„Å£„Å®Êòé„Çã„ÅèËºù„Åã„Åõ„Åæ„Åó„Çá„ÅÜÔºÅ',
        choices: [
          {
            id: 'excited',
            text: '„ÅØ„ÅÑÔºÅ„ÇÑ„Å£„Å¶„Åø„Åü„ÅÑ„Åß„ÅôÔºÅ',
            consequence: 'Aria„ÅÆ„Ç®„Éç„É´„ÇÆ„Éº„Åå„ÅÇ„Å™„Åü„Å´‰ºù„Çè„Çä„ÄÅÊñ∞„Åó„ÅÑÁô∫Ë¶ã„Å∏„ÅÆÊââ„ÅåÈñã„Åç„Åæ„Åô',
            mood_impact: 3
          },
          {
            id: 'tired',
            text: 'Áñ≤„Çå„Å¶„ÅÑ„Çã„Åë„Å©„ÄÅÈ†ëÂºµ„Çä„Åæ„Åô',
            consequence: 'Aria„ÅåÂÑ™„Åó„Åè„Ç®„Éç„É´„ÇÆ„Éº„ÇíÂàÜ„Åë„Å¶„Åè„Çå„Åæ„Åô',
            mood_impact: 2
          }
        ],
        reward: { xp: 35, insight: 'Â∞è„Åï„Å™ÊàêÂäü„ÅÆÁ©ç„ÅøÈáç„Å≠„Åå„ÄÅÂ§ß„Åç„Å™Ëá™‰ø°„ÇíËÇ≤„Å¶„Åæ„Åô„ÄÇ' },
        mood: 'energizing'
      }
    ]
  },
  {
    id: 'zen-peace',
    title: 'Zen\'s Path to Inner Peace',
    description: 'Á¶ÖÂ∏´Zen„Å®ÂÖ±„Å´ÂøÉ„ÅÆÂπ≥Âíå„Å®ÂÆâ„Çâ„Åé„ÇíË¶ã„Å§„Åë„ÇãÊóÖ',
    character: 'zen',
    theme: 'resilience',
    estimatedDuration: '3ÈÄ±Èñì',
    chapters: [
      {
        id: 'peace-1',
        title: 'The Still Waters',
        content: 'ÈùôÂØÇ„ÅÆ‰∏≠„Åß„ÄÅ„Åì„Çì„Å´„Å°„ÅØ„ÄÇüßò‚Äç‚ôÇÔ∏è ÁßÅ„ÅØZen„ÄÇ„ÅÇ„Å™„Åü„ÅÆÂøÉ„ÅÆÊπñ„ÅåÊ≥¢Á´ã„Å£„Å¶„ÅÑ„Çã„Å®„Åç„ÄÅ‰∏ÄÁ∑í„Å´Á©è„ÇÑ„Åã„Å™Ê∞¥Èù¢„ÇíÂèñ„ÇäÊàª„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇÊ∑±ÂëºÂê∏„Å®„Å®„ÇÇ„Å´„ÄÅ‰ªä„Åì„ÅÆÁû¨Èñì„Å´ÊÑèË≠ò„ÇíÂêë„Åë„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        reward: { xp: 20, insight: 'Âπ≥Âíå„ÅØÂ§ñ„Åã„ÇâÂæó„Çã„ÇÇ„ÅÆ„Åß„ÅØ„Å™„Åè„ÄÅÂÜÖÂÅ¥„ÅßËÇ≤„Å¶„Çã„ÇÇ„ÅÆ„ÄÇ' },
        mood: 'calming'
      }
    ]
  }
]

// Daily narrative snippets based on user's mood and progress
const dailyNarratives = {
  morning: [
    { mood: 'any', character: 'luna', text: 'üåô Êúù„ÅÆÈùô„Åë„Åï„ÅÆ‰∏≠„Åß„ÄÅÊñ∞„Åó„ÅÑ‰∏ÄÊó•„Åå„ÅÇ„Å™„Åü„ÇíÂæÖ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰ªäÊó•„ÅØ„Å©„Çì„Å™Áô∫Ë¶ã„Åå„ÅÇ„Çã„Åß„Åó„Çá„ÅÜ„ÅãÔºü' },
    { mood: 'any', character: 'aria', text: 'üåü „Åä„ÅØ„Çà„ÅÜÔºÅ‰ªäÊó•„Å®„ÅÑ„ÅÜÊñ∞„Åó„ÅÑ„Ç≠„É£„É≥„Éê„Çπ„Å´„ÄÅ„Å©„Çì„Å™Ëâ≤„ÇíÂ°ó„Çä„Åæ„Åô„ÅãÔºü„ÉØ„ÇØ„ÉØ„ÇØ„Åó„Åæ„Åô„Å≠ÔºÅ' },
    { mood: 'low', character: 'zen', text: 'üßò‚Äç‚ôÇÔ∏è Êúù„ÅÆ„Å≤„Çì„ÇÑ„Çä„Åó„ÅüÁ©∫Ê∞ó„ÇíÊÑü„Åò„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„ÅÇ„Å™„Åü„ÅÆ‰∏≠„ÅÆÈùô„Åë„Åï„Åå„ÄÅ‰∏ÄÊó•„ÅÆÊîØ„Åà„Å®„Å™„Çä„Åæ„Åô„ÄÇ' }
  ],
  afternoon: [
    { mood: 'tired', character: 'luna', text: 'üåô ÂçàÂæå„ÅÆÁñ≤„Çå„ÇíÊÑü„Åò„Å¶„ÅÑ„Åæ„Åô„Å≠„ÄÇÊúà„ÅåÊ∫Ä„Å°Ê¨†„Åë„Åô„Çã„Çà„ÅÜ„Å´„ÄÅ„Ç®„Éç„É´„ÇÆ„Éº„ÇÇËá™ÁÑ∂„Å™„É™„Ç∫„É†„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ' },
    { mood: 'good', character: 'aria', text: 'üåü ÂçàÂæå„ÅÆÈôΩÂ∞Ñ„Åó„ÅÆ„Çà„ÅÜ„Å´„ÄÅ„ÅÇ„Å™„Åü„ÅÆÁ¨ëÈ°î„ÅåÂë®„Çä„ÇíÊòé„Çã„Åè„Åó„Å¶„ÅÑ„Åæ„Åô„Å≠ÔºÅ' }
  ],
  evening: [
    { mood: 'any', character: 'zen', text: 'üßò‚Äç‚ôÇÔ∏è Â§ïÊöÆ„Çå„Å®„Å®„ÇÇ„Å´„ÄÅ‰ªäÊó•‰∏ÄÊó•„ÇíÊåØ„ÇäËøî„ÇãÊôÇÈñì„Åß„Åô„ÄÇÂ∞è„Åï„Å™ÊÑüË¨ù„ÇíË¶ã„Å§„Åë„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ' },
    { mood: 'accomplished', character: 'aria', text: 'üåü ‰ªäÊó•„ÇÇÁ¥†Êô¥„Çâ„Åó„ÅÑ‰∏ÄÊó•„Åß„Åó„Åü„Å≠ÔºÅ„ÅÇ„Å™„Åü„ÅÆÂä™Âäõ„ÅåÂÆü„ÇíÁµê„Çì„Åß„ÅÑ„Åæ„Åô„ÄÇ' }
  ]
}

// Character development arcs that evolve based on user interaction
const characterEvolution = {
  luna: {
    stages: [
      { name: 'Êñ∞Êúà', description: 'Âá∫‰ºö„Å£„Åü„Å∞„Åã„Çä„ÅÆÁ•ûÁßòÁöÑ„Å™Â≠òÂú®', relationship: 0 },
      { name: '‰∏âÊó•Êúà', description: 'Â∞ë„Åó„Åö„Å§ÂøÉ„ÇíÈñã„ÅÑ„Å¶„Åè„Çå„ÇãÂèãÈÅî', relationship: 25 },
      { name: 'ÂçäÊúà', description: 'Ê∑±„ÅÑË©±„Åå„Åß„Åç„ÇãÁõ∏Ë´áÁõ∏Êâã', relationship: 50 },
      { name: 'Ê∫ÄÊúà', description: 'È≠Ç„ÅÆÁµÜ„ÅßÁµê„Å∞„Çå„Åü„Éë„Éº„Éà„Éä„Éº', relationship: 100 }
    ]
  },
  aria: {
    stages: [
      { name: 'Êñ∞Êòü', description: 'ÂÖÉÊ∞ó„ÅÑ„Å£„Å±„ÅÑ„ÅÆÊñ∞„Åó„ÅÑÂèãÈÅî', relationship: 0 },
      { name: 'ËºùÊòü', description: '„ÅÇ„Å™„Åü„ÅÆÂøúÊè¥Âõ£Èï∑', relationship: 25 },
      { name: 'ÊµÅÊòü', description: '‰∏ÄÁ∑í„Å´ÂÜíÈô∫„Åô„ÇãË¶™Âèã', relationship: 50 },
      { name: 'ÊÅíÊòü', description: 'Ê∞∏ÈÅ†„Å´Ëºù„ÅèÂøÉ„ÅÆÊîØ„Åà', relationship: 100 }
    ]
  },
  zen: {
    stages: [
      { name: 'Êñ∞ÂèÇËÄÖ', description: 'Èùô„Åã„Å™Â∞é„ÅçÊâã', relationship: 0 },
      { name: 'ÂºüÂ≠ê', description: '„ÅÇ„Å™„Åü„ÅÆÊàêÈï∑„ÇíË¶ãÂÆà„ÇãÂ∏´', relationship: 25 },
      { name: 'Âèã‰∫∫', description: 'ÂøÉ„ÅÆÂπ≥Âíå„ÇíÂàÜ„Åã„Å°Âêà„ÅÜ‰ª≤Èñì', relationship: 50 },
      { name: 'Â∏´Âºü', description: '‰∫í„ÅÑ„Å´Â≠¶„Å≥Âêà„ÅÜÊ∑±„ÅÑÈñ¢‰øÇ', relationship: 100 }
    ]
  }
}

export function StoryNarrative({ 
  currentArc,
  userMood,
  timeOfDay,
  onChoiceSelect,
  onChapterComplete 
}: {
  currentArc?: StoryArc
  userMood: string
  timeOfDay: 'morning' | 'afternoon' | 'evening'
  onChoiceSelect?: (choice: StoryChoice) => void
  onChapterComplete?: (chapterId: string) => void
}) {
  const [currentChapter, setCurrentChapter] = useState(0)
  const [selectedChoice, setSelectedChoice] = useState<string | null>(null)
  const [showReward, setShowReward] = useState(false)

  if (!currentArc) return null

  const chapter = currentArc.chapters[currentChapter]

  const handleChoiceSelect = (choice: StoryChoice) => {
    setSelectedChoice(choice.id)
    
    setTimeout(() => {
      setShowReward(true)
      if (onChoiceSelect) onChoiceSelect(choice)
      
      setTimeout(() => {
        if (currentChapter < currentArc.chapters.length - 1) {
          setCurrentChapter(currentChapter + 1)
        }
        setShowReward(false)
        setSelectedChoice(null)
        if (onChapterComplete) onChapterComplete(chapter.id)
      }, 2000)
    }, 1000)
  }

  return (
    <div className="space-y-4">
      <Card className="bg-gradient-to-br from-purple-50 to-indigo-50 border-purple-200">
        <CardContent className="p-6">
          {/* Story Arc Header */}
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="text-lg font-bold text-gray-800">{currentArc.title}</h3>
              <p className="text-sm text-gray-600">{currentArc.description}</p>
            </div>
            <div className="text-right">
              <div className="text-2xl">
                {currentArc.character === 'luna' ? 'üåô' : 
                 currentArc.character === 'aria' ? '‚≠ê' : 'üßò‚Äç‚ôÇÔ∏è'}
              </div>
              <div className="text-xs text-gray-500">{currentArc.estimatedDuration}</div>
            </div>
          </div>

          {/* Progress Indicator */}
          <div className="mb-6">
            <div className="flex justify-between text-sm mb-2">
              <span>Chapter {currentChapter + 1} of {currentArc.chapters.length}</span>
              <span>{Math.round(((currentChapter + 1) / currentArc.chapters.length) * 100)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-purple-400 to-purple-600 rounded-full h-2 transition-all duration-1000"
                style={{ width: `${((currentChapter + 1) / currentArc.chapters.length) * 100}%` }}
              />
            </div>
          </div>

          {/* Chapter Content */}
          <Card className="bg-white border-0 shadow-inner">
            <CardContent className="p-4">
              <h4 className="font-semibold text-gray-800 mb-3">{chapter.title}</h4>
              
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-4"
              >
                <p className="text-gray-700 leading-relaxed">{chapter.content}</p>

                {/* Choices */}
                {chapter.choices && !selectedChoice && (
                  <div className="space-y-3">
                    <p className="text-sm font-medium text-gray-600">„Å©„ÅÜÂèçÂøú„Åó„Åæ„Åô„ÅãÔºü</p>
                    {chapter.choices.map((choice) => (
                      <motion.button
                        key={choice.id}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => handleChoiceSelect(choice)}
                        className="w-full p-3 text-left bg-purple-50 hover:bg-purple-100 border border-purple-200 rounded-lg transition-colors"
                      >
                        <div className="font-medium text-gray-800">{choice.text}</div>
                        <div className="text-xs text-gray-600 mt-1">{choice.consequence}</div>
                      </motion.button>
                    ))}
                  </div>
                )}

                {/* Selected Choice Feedback */}
                {selectedChoice && (
                  <motion.div
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="p-3 bg-green-50 border border-green-200 rounded-lg"
                  >
                    <div className="text-green-800 font-medium">ÈÅ∏Êäû„ÅåÂèçÊò†„Åï„Çå„Å¶„ÅÑ„Åæ„Åô...</div>
                  </motion.div>
                )}

                {/* Reward Display */}
                <AnimatePresence>
                  {showReward && chapter.reward && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg"
                    >
                      <div className="flex items-center space-x-3">
                        <Star className="h-6 w-6 text-yellow-500" />
                        <div>
                          <div className="font-semibold text-yellow-800">Chapter Complete!</div>
                          <div className="text-sm text-yellow-700">
                            +{chapter.reward.xp} XPÁç≤Âæó
                            {chapter.reward.item && ` ‚Ä¢ ${chapter.reward.item}„ÇíÁç≤Âæó`}
                          </div>
                          {chapter.reward.insight && (
                            <div className="text-xs text-yellow-600 mt-1 italic">
                              "{chapter.reward.insight}"
                            </div>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            </CardContent>
          </Card>
        </CardContent>
      </Card>
    </div>
  )
}

export function DailyNarrativeSnippet({ 
  userMood, 
  timeOfDay, 
  characterPreference 
}: {
  userMood: string
  timeOfDay: 'morning' | 'afternoon' | 'evening'
  characterPreference?: 'luna' | 'aria' | 'zen'
}) {
  const [currentSnippet, setCurrentSnippet] = useState<any>(null)

  useEffect(() => {
    const timeBasedNarratives = dailyNarratives[timeOfDay] || []
    
    // Filter by mood or character preference
    let filteredNarratives = timeBasedNarratives.filter(n => 
      (n.mood === userMood || n.mood === 'any') &&
      (!characterPreference || n.character === characterPreference)
    )

    if (filteredNarratives.length === 0) {
      filteredNarratives = timeBasedNarratives.filter(n => n.mood === 'any')
    }

    if (filteredNarratives.length > 0) {
      const randomSnippet = filteredNarratives[Math.floor(Math.random() * filteredNarratives.length)]
      setCurrentSnippet(randomSnippet)
    }
  }, [userMood, timeOfDay, characterPreference])

  if (!currentSnippet) return null

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-4"
    >
      <Card className="bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200">
        <CardContent className="p-4">
          <div className="flex items-start space-x-3">
            <div className="text-2xl">
              {currentSnippet.character === 'luna' ? 'üåô' : 
               currentSnippet.character === 'aria' ? '‚≠ê' : 'üßò‚Äç‚ôÇÔ∏è'}
            </div>
            <div className="flex-1">
              <div className="text-sm font-medium text-gray-700 mb-1">
                {currentSnippet.character === 'luna' ? 'Luna' : 
                 currentSnippet.character === 'aria' ? 'Aria' : 'Zen'}„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
              </div>
              <p className="text-gray-600 leading-relaxed">{currentSnippet.text}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}

export function CharacterRelationshipTracker({ 
  character, 
  relationshipLevel,
  interactionCount 
}: {
  character: 'luna' | 'aria' | 'zen'
  relationshipLevel: number
  interactionCount: number
}) {
  const evolution = characterEvolution[character]
  const currentStage = evolution.stages.find(stage => 
    relationshipLevel >= stage.relationship
  ) || evolution.stages[0]

  const nextStage = evolution.stages.find(stage => 
    relationshipLevel < stage.relationship
  )

  return (
    <Card className="bg-gradient-to-br from-pink-50 to-rose-50 border-pink-200">
      <CardContent className="p-4">
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-semibold text-gray-800">
            {character === 'luna' ? 'Luna' : 
             character === 'aria' ? 'Aria' : 'Zen'}„Å®„ÅÆÁµÜ
          </h4>
          <div className="text-2xl">
            {character === 'luna' ? 'üåô' : 
             character === 'aria' ? '‚≠ê' : 'üßò‚Äç‚ôÇÔ∏è'}
          </div>
        </div>
        
        <div className="space-y-3">
          <div>
            <div className="flex justify-between text-sm mb-1">
              <span className="font-medium">{currentStage.name}</span>
              <span>{relationshipLevel}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-pink-400 to-rose-400 rounded-full h-2 transition-all duration-1000"
                style={{ width: `${relationshipLevel}%` }}
              />
            </div>
          </div>
          
          <p className="text-xs text-gray-600">{currentStage.description}</p>
          
          {nextStage && (
            <div className="text-xs text-gray-500">
              Ê¨°„ÅÆ„Çπ„ÉÜ„Éº„Ç∏„Äå{nextStage.name}„Äç„Åæ„Åß {nextStage.relationship - relationshipLevel}%
            </div>
          )}
          
          <div className="flex items-center space-x-4 text-xs text-gray-500">
            <span className="flex items-center space-x-1">
              <Heart className="h-3 w-3" />
              <span>{interactionCount}Âõû„ÅÆÂØæË©±</span>
            </span>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}